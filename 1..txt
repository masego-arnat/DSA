import ballerina/grpc;
import io.ballerina.runtime.api.values.BObject;

// Define a configurable port number for the gRPC service
configurable int port = 9090;

// Define a record type for representing book information
record Book {
    string title;       // The title of the book
    string author_1;    // The name of the first author
    string author_2;    // The name of the second author
    string location;    // The physical location of the book in the library
    string isbn;        // The ISBN (International Standard Book Number) of the book
    boolean status;     // The availability status of the book
};

// Create an array to store book records as an in-memory database
Book[] books = [];

// Define a gRPC service for managing library operations
@grpc:Descriptor {
    value: DESCRIPTOR_LIBRARY_DESC
}
service "Library" on new grpc:Listener(port) {

    // Remote function for adding a book to the library
    remote function addBook(Book request) returns Book {
        // Implement the logic to add a book here
        // Add the book to the 'books' array and return the added book
        books.push(request);
        return request;
    }

    // Remote function for creating users (implementation not provided in this template)
    remote function createUsers(stream User users) returns UserResponse {
        // Implement the logic to create users here
    }

    // Remote function for updating book information (not implemented in this template)
    remote function updateBook(Book request) returns Book {
        // Implement the logic to update a book here
    }

    // Remote function for removing a book from the library (not implemented in this template)
    remote function removeBook(Book request) returns BookListResponse {
        // Implement the logic to remove a book here
    }

    // Remote function for listing available books (not implemented in this template)
    remote function listAvailableBooks(Empty request) returns BookListResponse {
        // Implement the logic to list available books here
    }

    // Remote function for locating a book (not implemented in this template)
    remote function locateBook(Book request) returns LocationResponse {
        // Implement the logic to locate a book here
    }

    // Remote function for borrowing a book (not implemented in this template)
    remote function borrowBook(BorrowRequest request) returns BorrowResponse {
        // Implement the logic to borrow a book here
    }
}

// Import required Protocol Buffer modules
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

// Define the Protocol Buffer service for library operations
service Library {
    // RPC method to add a book
    rpc addBook(Book) returns (Book);

    // RPC method to create users
    rpc createUsers(stream User) returns (UserResponse);

    // RPC method to update book information
    rpc updateBook(Book) returns (Book);

    // RPC method to remove a book
    rpc removeBook(Book) returns (BookListResponse);

    // RPC method to list available books
    rpc listAvailableBooks(Empty) returns (BookListResponse);

    // RPC method to locate a book
    rpc locateBook(Book) returns (LocationResponse);

    // RPC method for borrowing a book
    rpc borrowBook(BorrowRequest) returns (BorrowResponse);
}

// Define the structure of a User message containing user details
message User {
    string user_id = 1;
    string username = 2;
    bool is_librarian = 3;
}

// Define the structure of the response message containing created users
message UserResponse {
    repeated User users = 1;
}

// Define a response message containing the location of a book
message LocationResponse {
    string location = 1;
}

// Define a request message for borrowing a book
message BorrowRequest {
    string user_id = 1;
    string isbn = 2;
}

// Define a response message for the result of a book borrowing operation
message BorrowResponse {
    bool success = 1;
    string message = 2;
}

// Define a response message containing a list of books
message BookListResponse {
    repeated Book books = 1;
}
